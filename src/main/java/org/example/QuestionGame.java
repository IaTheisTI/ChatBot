package org.example;

import java.util.*;


/**
 * Класс представляет собой объект головоломки.
 */
class Game {
    private String question;
    private String answer;
    private String hint;

    /**
     * Конструктор класса Game. Инициализирует загадку, ответ и подсказку.
     *
     * @param question Вопрос головоломки.
     * @param answer   Правильный ответ на головоломку.
     * @param hint     Подсказка для головоломки.
     */
    public Game(String question, String answer, String hint) {
        this.question = question;
        this.answer = answer;
        this.hint = hint;
    }

    /**
     * Метод возвращает вопрос головоломки.
     *
     * @return Вопрос головоломки.
     */
    public String getQuestion() {
        return question;
    }

    /**
     * Метод возвращает правильный ответ на головоломку.
     *
     * @return Правильный ответ на головоломку.
     */
    public String getAnswer() {
        return answer;
    }

    /**
     * Метод возвращает подсказку для головоломки.
     *
     * @return Подсказка для головоломки.
     */
    public String getHint() {
        return hint;
    }
}

/**
 * Класс реализующий игру в загадки.
 */
public class QuestionGame {

    /**
     * Текущая загадка, которую должен угадать пользователь
     */
    protected Game currentGame;


    /**
     * Список всех загадок, доступных в игре, хранится в формате "вопрос" -> "ответ"
     */
    private Map<String, Game> puzzles;


    /**
     * Словарь для отслеживания правильных ответов пользователя (количество правильных ответов по chatId)
     */
    private Map<Long, Integer> correctAnswers;


    /**
     * Словарь для отслеживания попыток пользователя (количество попыток по chatId)
     */
    private Map<Long, Integer> userAttempts;


    /**
     * Словарь для отслеживания нерешенных загадок пользователя (список нерешенных загадок по chatId)
     */
    private Map<Long, List<String>> unsolvedPuzzles;


    /**
     * Конструктор класса PuzzleGame. Инициализирует объекты головоломок, словари и статистики ответов пользователей.
     */
    public QuestionGame() {
        puzzles = new HashMap<>();
        puzzles.put("Часто висит головой вниз, к небу стремится всегда, но полететь не может", new Game("Часто висит головой вниз, к небу стремится всегда, но полететь не может", "Капля", "Это падает с неба во время дождя"));
        puzzles.put("Имеет корни, но не растет. Не видит, но слышит", new Game("Имеет корни, но не растет. Не видит, но слышит", "Дерево", "Это большое растение в парке"));
        puzzles.put("Без рук, без ног, а всегда идут", new Game("Без рук, без ног, а всегда идут", "Часы", "Показывает время"));
        puzzles.put("Без окон, дверей и крыши, но внутри есть золото", new Game("Без окон, дверей и крыши, но внутри есть золото", "Арахис", "Это еда и часто используется для приготовления масла"));
        puzzles.put("Чем больше берешь, тем меньше остается", new Game("Чем больше берешь, тем меньше остается", "Время", "Это уходит, когда вы его не замечаете"));
        puzzles.put("Что можно увидеть с закрытыми глазами?", new Game("Что можно увидеть с закрытыми глазами?", "Сон", "Это происходит, когда вы спите"));
        puzzles.put("Белый, пушистый, летает без крыльев", new Game("Белый, пушистый, летает без крыльев", "Снег", "Это падает с неба зимой и покрывает землю"));
        puzzles.put("Имеет ключ, но не открывает замок", new Game("Имеет ключ, но не открывает замок", "Карта", " Это помогает вам найти путь"));
        puzzles.put("Может быть легким как перышко, но сам не поднимется в воздух", new Game("Может быть легким как перышко, но сам не поднимется в воздух", "Ветер", "Это движется вокруг нас, но невидимо"));
        puzzles.put("Имеет ушко, но не слышит", new Game("Имеет ушко, но не слышит", "Игла", "Используется для шитья"));
        puzzles.put("Бежит и не может уйти вперед", new Game("Бежит и не может уйти вперед", "Река", "Это течет от гор к океанам"));
        puzzles.put("Висит в воздухе и греет нас своим светом", new Game("Висит в воздухе и греет нас своим светом", "Солнце", "Это небесное тело светит днем"));
        puzzles.put("Имеет зубы, но не кусает", new Game("Имеет зубы, но не кусает", "Гребешок", "Это находится у морских животных"));
        puzzles.put("Может быть горячим или холодным, но никогда не теплым", new Game("Может быть горячим или холодным, но никогда не теплым", "Огонь", "Это используется для приготовления пищи и обогрева"));
        puzzles.put("Стоит на кончике ног, но не упадет", new Game("Стоит на кончике ног, но не упадет", "Тень", "Это образуется, когда что-то загораживает свет"));
        puzzles.put("Серое, большое, и все внутри", new Game("Серое, большое, и все внутри", "Облако", "Это плавает в небе и приносит дождь"));
        puzzles.put("Маленький как бутылка, светится внутри, но не является источником света", new Game("Маленький как бутылка, светится внутри, но не является источником света", "Лампочка", "Это используется для освещения комнаты"));
        puzzles.put("Может стоять в одной точке, но всегда стремится вверх", new Game("Может стоять в одной точке, но всегда стремится вверх", "Дым", "Это образуется, когда что-то горит"));
        puzzles.put("Что можно сломать, даже если ни разу не касался?", new Game("Что можно сломать, даже если ни разу не касался?", "Обещание", "Это слово, которое вы должны держать"));
        puzzles.put("Быстрый как стрела, он летит без перьев", new Game("Быстрый как стрела, он летит без перьев", "Свет", "Это движется со скоростью 299 792 458 метров в секунду"));


        userAttempts = new HashMap<>();
        correctAnswers = new HashMap<>();
        currentGame = null;
        unsolvedPuzzles = new HashMap<>();
    }


    /**
     * Метод начинает новую головоломку для указанного чата.
     *
     * @param chatId Идентификатор чата, в котором начинается головоломка.
     * @return Сообщение с вопросом текущей головоломки.
     */
    public String startPuzzle(long chatId) {
        // Проверка, есть ли доступные загадки
        if (puzzles.isEmpty()) {
            return "Все загадки решены!";
        }
        // Инициализация попыток пользователя и выбор случайной загадки для начала игры
        userAttempts.put(chatId, 0);
        String randomPuzzleKey = getRandomPuzzle();
        currentGame = puzzles.get(randomPuzzleKey);
        return "Добро пожаловать в игру в загадки! Начнем.\nЗагадка: " + currentGame.getQuestion();
    }


    /**
     * Метод проверяет ответ пользователя на текущую головоломку.
     *
     * @param chatId     Идентификатор чата, откуда получен ответ пользователя.
     * @param userAnswer Ответ пользователя на головоломку.
     * @return Сообщение с результатом проверки ответа пользователя.
     */
    public String checkAnswer(long chatId, String userAnswer) {
        // Проверка наличия текущей загадки
        if (currentGame == null) {
            return "Нет текущей загадки.";
        }
        // Проверка правильности ответа пользователя и обновление статистики
        if (!puzzles.isEmpty()) {
            if (userAnswer.equalsIgnoreCase(currentGame.getAnswer())) {
                userAttempts.put(chatId, 0);
                correctAnswers.put(chatId, correctAnswers.getOrDefault(chatId, 0) + 1);
                puzzles.remove(currentGame.getQuestion());
                // Проверка, остались ли еще загадки для решения
                if (puzzles.isEmpty()) {
                    return "Поздравляю, вы решили все загадки! Поздравляю, вы решили все загадки! Пожалуйста, нажмите /stoppuzzle, чтобы завершить игру и посмотреть статистику, либо /restart, чтобы начать заново";
                } else {
                    // Выбор следующей случайной загадки и сообщение пользователю
                    currentGame = puzzles.get(getRandomPuzzle());
                    return "Верно! Следующая загадка: " + currentGame.getQuestion();
                }
            } else {
                // Повторный запрос ответа у пользователя, если он ошибся
                return "Неверно! Попробуйте еще раз.";
            }
        } else {
            // Сообщение об окончании загадок, если все загадки решены
            return "Поздравляю, вы решили все загадки! Поздравляю, вы решили все загадки! Пожалуйста, нажмите /stoppuzzle, чтобы завершить игру и посмотреть статистику, либо /restart, чтобы начать заново";
        }
    }


    /**
     * Метод возвращает подсказку для текущей головоломки.
     *
     * @return Подсказка для текущей головоломки.
     */
    public String getHint() {
        // Проверка наличия текущей загадки
        if (currentGame == null) {
            return "Нет текущей загадки.";
        }
        // Возврат подсказки к текущей загадке
        return "Подсказка: " + currentGame.getHint();
    }


    /**
     * Метод выбирает случайную головоломку из доступных.
     *
     * @return Ключ выбранной случайной головоломки.
     */
    private String getRandomPuzzle() {
        // Создание списка ключей (вопросов) из коллекции доступных загадок
        List<String> puzzleList = new ArrayList<>(puzzles.keySet());
        // Создание объекта Random для генерации случайного числа
        Random random = new Random();
        // Выбор случайного вопроса загадки из списка и возврат его
        return puzzleList.get(random.nextInt(puzzleList.size()));
    }


    /**
     * Метод выбирает следующую головоломку для указанного чата.
     *
     * @param chatId Идентификатор чата, для которого выбирается следующая головоломка.
     * @return Сообщение с вопросом следующей головоломки.
     */
    public String getNextPuzzle(long chatId) {
        // Удаление текущей загадки
        puzzles.remove(currentGame.getQuestion());
        // Сброс попыток пользователя
        userAttempts.put(chatId, 0);
        // Проверка, есть ли еще доступные загадки для решения
        if (puzzles.isEmpty()) {
            return "Все загадки решены! Поздравляю, вы решили все загадки! Пожалуйста, нажмите /stoppuzzle, чтобы завершить игру и посмотреть статистику, либо /restart, чтобы начать заново";
        } else {
            // Выбор следующей случайной загадки и сообщение пользователю
            currentGame = puzzles.get(getRandomPuzzle());
            return "Следующая загадка: " + currentGame.getQuestion();
        }
    }


    /**
     * Метод возвращает статистику ответов пользователя для указанного чата.
     *
     * @param chatId Идентификатор чата, для которого возвращается статистика.
     * @return Статистика ответов пользователя в виде текстового сообщения.
     */
    public String getStatistics(long chatId) {
        // Получение количества правильных ответов пользователя и вычисление процента правильных ответов
        int correct = correctAnswers.getOrDefault(chatId, 0);
        int total = 20; // Общее количество загадок
        double percentage = (correct * 100.0) / total;
        // Формирование и возврат строки с статистикой
        return "Правильных ответов: " + correct + "\nНеправильных ответов: " +
                (20-correct) + "\nПроцент правильных ответов: " + percentage + "%";
    }

    /**
     * Метод перезапускает игровую сессию
     *
     * @param chatId Идентификатор чата, для которого возвращается ответ на загадку.
     * @return сообщение о начале новой игры
     */
    public String restart(long chatId) {
        // Сброс данных пользователя и доступных загадок
        userAttempts.remove(chatId);
        correctAnswers.remove(chatId);
        puzzles.clear();
        unsolvedPuzzles.remove(chatId);

        // Восстановление исходных загадок
        puzzles.put("Часто висит головой вниз, к небу стремится всегда, но полететь не может", new Game("Часто висит головой вниз, к небу стремится всегда, но полететь не может", "Капля", "Это падает с неба во время дождя"));
        puzzles.put("Имеет корни, но не растет. Не видит, но слышит", new Game("Имеет корни, но не растет. Не видит, но слышит", "Дерево", "Это большое растение в парке"));
        puzzles.put("Без рук, без ног, а всегда идут", new Game("Без рук, без ног, а всегда идут", "Часы", "Показывает время"));
        puzzles.put("Без окон, дверей и крыши, но внутри есть золото", new Game("Без окон, дверей и крыши, но внутри есть золото", "Арахис", "Это еда и часто используется для приготовления масла"));
        puzzles.put("Чем больше берешь, тем меньше остается", new Game("Чем больше берешь, тем меньше остается", "Время", "Это уходит, когда вы его не замечаете"));
        puzzles.put("Что можно увидеть с закрытыми глазами?", new Game("Что можно увидеть с закрытыми глазами?", "Сон", "Это происходит, когда вы спите"));
        puzzles.put("Белый, пушистый, летает без крыльев", new Game("Белый, пушистый, летает без крыльев", "Снег", "Это падает с неба зимой и покрывает землю"));
        puzzles.put("Имеет ключ, но не открывает замок", new Game("Имеет ключ, но не открывает замок", "Карта", " Это помогает вам найти путь"));
        puzzles.put("Может быть легким как перышко, но сам не поднимется в воздух", new Game("Может быть легким как перышко, но сам не поднимется в воздух", "Ветер", "Это движется вокруг нас, но невидимо"));
        puzzles.put("Имеет ушко, но не слышит", new Game("Имеет ушко, но не слышит", "Игла", "Используется для шитья"));
        puzzles.put("Бежит и не может уйти вперед", new Game("Бежит и не может уйти вперед", "Река", "Это течет от гор к океанам"));
        puzzles.put("Висит в воздухе и греет нас своим светом", new Game("Висит в воздухе и греет нас своим светом", "Солнце", "Это небесное тело светит днем"));
        puzzles.put("Имеет зубы, но не кусает", new Game("Имеет зубы, но не кусает", "Гребешок", "Это находится у морских животных"));
        puzzles.put("Может быть горячим или холодным, но никогда не теплым", new Game("Может быть горячим или холодным, но никогда не теплым", "Огонь", "Это используется для приготовления пищи и обогрева"));
        puzzles.put("Стоит на кончике ног, но не упадет", new Game("Стоит на кончике ног, но не упадет", "Тень", "Это образуется, когда что-то загораживает свет"));
        puzzles.put("Серое, большое, и все внутри", new Game("Серое, большое, и все внутри", "Облако", "Это плавает в небе и приносит дождь"));
        puzzles.put("Маленький как бутылка, светится внутри, но не является источником света", new Game("Маленький как бутылка, светится внутри, но не является источником света", "Лампочка", "Это используется для освещения комнаты"));
        puzzles.put("Может стоять в одной точке, но всегда стремится вверх", new Game("Может стоять в одной точке, но всегда стремится вверх", "Дым", "Это образуется, когда что-то горит"));
        puzzles.put("Что можно сломать, даже если ни разу не касался?", new Game("Что можно сломать, даже если ни разу не касался?", "Обещание", "Это слово, которое вы должны держать"));
        puzzles.put("Быстрый как стрела, он летит без перьев", new Game("Быстрый как стрела, он летит без перьев", "Свет", "Это движется со скоростью 299 792 458 метров в секунду"));

        currentGame = null;
        // Начало новой игры и возврат сообщения пользователю
        return "Игра в загадки начата заново.\n" + startPuzzle(chatId);
    }


    /**
     * Метод возвращает ответ на текущую загадку, записывает её как нерешённую и переходит к следующей загадке.
     *
     * @param chatId Идентификатор чата, для которого возвращается ответ на загадку.
     * @return Ответ на текущую загадку и следующая загадка.
     */
    public String getAnswerAndNextPuzzle(long chatId) {
        // Проверка наличия текущей загадки
        if (currentGame == null) {
            return "Нет текущей загадки.";
        }
        // Формирование строки с ответом на текущую загадку
        String answer = "Ответ на загадку '" + currentGame.getQuestion() + "' : " + currentGame.getAnswer();

        // Удаление текущей загадки и сброс попыток пользователя
        puzzles.remove(currentGame.getQuestion());
        userAttempts.put(chatId, 0);
        // Проверка, остались ли еще доступные загадки для решения
        if (puzzles.isEmpty()) {
            return answer + "\nПоздравляю, вы решили все загадки! Пожалуйста, нажмите /stoppuzzle, чтобы завершить игру и посмотреть статистику, либо /restart, чтобы начать заново";
        } else {
            // Выбор следующей случайной загадки и формирование сообщения пользователю
            currentGame = puzzles.get(getRandomPuzzle());
            return answer + "\nСледующая загадка: " + currentGame.getQuestion();
        }
    }

}





